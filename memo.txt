C# 메모

- 프로젝트 : C#에서 필요로 하는 여러 파일에 대한 정보 및 컴파일 옵션 정보 등 포함
- 솔루션 : 다수의 프로젝트를 하나의 솔루션 안에서 다룰 수 있음

-기본 구조
 1) using 부분 : 프롤로그(prologue, prolog) -> 도입부
   - class의 namespace를 선언하는 역할
   - namespace 명시 없이 클래스 사용
   ex) Console.Write() -> System.Console.Write()
   -> namespace명.class명

 2) namespace 부분 : 프로그램 몸체

- 프로그램의 진입점 Main
 - C#은 하나 이상의 클래스 정의는 필수
 - 자동 생성 코드의 Program 클래스
 - Program class의 Main == C/C++ main()
 - 객체 안에서 static 메서드
 ex)
 static void Main() // 기본형식
 {
     ... 코드
 }
 - Main() 형식
 static void Main(string[] args)



- 키워드
 -> abstract, as, base, byte, checked, decimal, delegate, event, interface 등등

- 출력 형식 문자 
 1. C : 통화 ($ 등)
 2. D : 10진수 정수
 3. E : 지수형태 출력
 4. F : 부동소수점 출력
 5. G : 기본 출력

ex) Console.WriteLine("{0:C} {1:P} {0:X}", 123, 123.45)

-데이터 형
 C#의 데이터형 object로부터 파생된 객체
 System.Object == object 
 - 데이터 형은 CTS에서 정의된 객체
 
float 형 
: 소수점형 뒤에 f, F 접미사 명시 / 없으면 double 형

C/C++ 문자열과 차이 : 문자열 끝에 0, '\0'
'+' : 문자열 연결
== : 문자열 비교
[인덱스] : 문자

암시적 데이터형 var
- 대입되는 데이터에 따라 데이터형 결정
- var를 사용할 수 없는 예
 1) null값 초기화, 매개변수로는 사용 못함
 2) var는 지역변수로만 사용 / 클래스 멤버로는 사용 못함
 3) 연속적으로 초기화 하는 경우 
   var m = 10, n = 20;

nullable 형
- null을 허용하지 않는 데이형이 null값을 허용
- 형식
: 데이터형? 변수명;
ex) int? var1;
    bool? var2 = null; // true, false, null
- 속성
 1) .HasValue // true : 변수가 있을 때, false : null값일 때
 2) .Value // 읽기전용

 변환
 - Tostring() : 현재의 값을 문자열로 바꾸는 함수
 - 기본 데이터형.Parse() -> () 안에 문자열이 들어간다
 - Convert.ToInt32()  /  Convert.ToSingle() [이 때 Tosingle은 float에 해당]  / Convert.ToXXXXXX() 

박싱과 언박싱
- 박싱(boxing) : 데이터 형을 최상위 object 형으로 변환하여 힙(heap 메모리)에 저장
ex) int m = 123;
    object obj = m;

- 언박싱(unboxing) : 힙에 저장된 형식을 다시 원래의 형식으로 변환
ex) int n = (int)obj;

표준 입력
- Console.ReadKey() : 사용자가 눌린 키 한 문자 정보를 리턴하는 메서드
- 함수 원형
 1) public static ConsoleKeyInfo ReadKey() -> 오버로딩 : 하나의 함수로 여러개의 기능을 할 수 있게 하는 것  반환 형삭안 ConsoleKeyInfo는 구조체로 정의되어 있다.
 2) public static ConsoleKeyInfo ReadKey (bool intercept) -> true : 화면 출력 안 함 / false : 화면 출력
 3) ConsoleKeyInfo : 키의 문자와 Shift, Alt, Ctrl 보조키 상태 포함

 ㄴ ConsoleKeyInfo의 속성
    - ConsoleKeyInfo.Key -> .Key : 여기에는 누른 키의 값이 들어가게 된다. 단, 알파벳은 어떤 것을 넣어도 대문자로 처리가 된다.
    - ConsoleKey 열거형 값
    - ConsoleKey.A, ConsoleKey.Escape 등...
    -> MSDN에서 찾아 볼 것

    - ConsoleKeyInfo.KeyChar : 눌린 키의 유니코드를 얻는 속서응로 대소문자 등을 모두 구분할 수 있다.

  ㄴ Console.ReadLine() : 엔터키가 눌려질 때까지 입력 받은 문자열을 리턴하는 메서드
     - 입력 받은 문자열을 숫자로 사용할 때는  Convert.ToInt32() 등의 메서드를 사용

=====================================================================================================================================
사용자 지정형 : struct, enum, class, interface

- 형식 
public struct 구조체명 -> public : 접근지정자
{
  //멤버, 속성, 메서드 
}

- 제한 사항 
 1) 구조체에 선언된 const, static 변수만 초기화 가능
 2) 구조체 안에 선언할 수 있는 생성자는 매개변수가 반드시 있어야 함 -> 생성자는 new와 연관되어 있다. [생성자는 구조체를 생성할 때 자동으로 호출되는 메소드]
 3) 구조체를 같은 구조체에 대입하게 되면 값이 복사
 4) 구조체는 값 형식이고 클래스는 참조 형식임 -> 참조형식이면 참조된 값이 바뀌면 참조한 값도 변하게 된다.
 5) 구조체는 값 형식이므로 선언만으로도 사용 가능
 6) new를 사용했을 때만 -> 생성자 호출 -> 기본값으로 초기화
 7) 구조체는 구조체 또는 클래스에 상속할 수 없음
 8) 구조체는 인터페이스를 상속하여 메서드를 구현할 수 있음

열거형 : 상수를 문자열로 대치하여 선언 / 상수에 의미 부여
 - 형식 : 
  1) enum 열거형 명칭 {문자열1, 문자열2};
  2) enum 열거형 명칭 {문자열1 = 상수, 문자열2 = 상수};
  3) enum 열거형 명칭 {문자열1 = 상수, 문자열2};
  
 - 기본은 int형이지만 char 형을 제외한 형식 지정할 수 있음
  ex) enum Days:byte{Sun = 0, Mon, Tue, Wed, Thu};
 - 열거형 변수가 아닌 변수에 열거향 값을 대입할 때는 데이터형을 명시할 것

연산자
 - 단항 연산자 : +, -, !, ~, ++, -- 등 (!는 bool형에서만 사용) ※ +, -는 부호

 - 산술 연산자 : *, /, %, -, + (string에서 +는 문자연결 / 정수/부동 + "문자열" = "문자열")

 - shift 연산자 : <<, >>, >=, <=, >, <, ==, !=   -> 관계 연산자의 결과 : true, false

 - is 연산자 : 형식 호환을 조사하는 연산자 
  형식) '변수' is '클래스형 or 데이터형'   -> 결과는 true, false
  >> 박싱/언박싱 변환, 참조 변환에서 사용\

 - as 연산자 : 형변환과 변화 조사 / 캐스트 연산자의 역할과 불변환은 null 리턴
  ㄴ 참조, 박싱, 언박싱, null형에 사용
  ㄴ 형식 : 결과형 = 참조형, 언박싱, 박싱 as 변환형

 - 비트 연산자 : &, ^, |, &&, ||, ?, :

 - null 병합 연산자 : ?? (null 조사) [형식 : C = A ?? B] -> A가 null이 아니라면 A를 C에 대입 -> A가 null이면 B를 C에 대입

제어문
 - if ~ else 
 - switch case

반복문
 - while문
 - do ~ while문
 - foreach문

분기문
 - break 문
 - continue 문
점프문

예외처리문